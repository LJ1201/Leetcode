890. Find and Replace Pattern

Description:
Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

 

Example 1:

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.
Example 2:

Input: words = ["a","b","c"], pattern = "a"
Output: ["a","b","c"]
 

Constraints:

1 <= pattern.length <= 20
1 <= words.length <= 50
words[i].length == pattern.length
pattern and words[i] are lowercase English letters.




Code:

class Solution(object):
        
    def converttonum(self, b):
        tt = 0
        temp = {}
        for i in range(0,len(b)):
            if b[i] not in temp:
                temp[b[i]] = i+1
            
            tt = tt + temp[b[i]]**i
        
        return tt
           
    def findAndReplacePattern(self,words, pattern):
        """
        :type words: List[str]
        :type pattern: str
        :rtype: List[str]
        """
       
        ans = []
        
        pat = self.converttonum(pattern)

        
        if len (pattern) == 0:
            return []
                
        for i in range(0,len(words)):
            if self.converttonum(words[i]) == pat:
                ans.append(words[i])
            
        return ans
           
        
##Disadvantage: The runtime increases in exponential speed


